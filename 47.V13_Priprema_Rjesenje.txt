#include<iostream>
#include<vector>
#include<string>
#include<regex>
#include<thread>

using namespace std;

template<class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int _trenutnoElemenata;
public:
	Kolekcija()
	{
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutnoElemenata = 0;
	}

	Kolekcija(const Kolekcija& k)
	{
		_elementi1 = new T1[k._trenutnoElemenata];
		_elementi2 = new T2[k._trenutnoElemenata];

		for (size_t i = 0; i < k._trenutnoElemenata; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}

		_trenutnoElemenata = k._trenutnoElemenata;
	}

	Kolekcija& operator=(const Kolekcija& k)
	{
		if (this != &k)
		{
			delete[] _elementi1;
			delete[] _elementi2;

			_elementi1 = new T1[k._trenutnoElemenata];
			_elementi2 = new T2[k._trenutnoElemenata];

			for (size_t i = 0; i < k._trenutnoElemenata; i++)
			{
				_elementi1[i] = k._elementi1[i];
				_elementi2[i] = k._elementi2[i];
			}

			_trenutnoElemenata = k._trenutnoElemenata;
		}

		return *this;
	}

	~Kolekcija()
	{
		delete[] _elementi1;
		_elementi1 = nullptr;

		delete[] _elementi2;
		_elementi2 = nullptr;
	}

	/*1. AddElement :: omogucava dodavanje novog elementa u kolekciju.
	Osigurati automatsko prosiranje kolekcije prilikom dodavanja svakog novog elementa, te onemoguciti ponavljanje elemenata.
	Ukoliko se pokusa dodati dupli element funkcija vraca index pronadjenog duplog elementa, u suprotnom vraca vrijednost -1.*/

	int AddElement(T1& el1, T2& el2)
	{
		for (size_t i = 0; i < _trenutnoElemenata; i++)
		{
			if (_elementi1[i] == el1 && _elementi2[i] == el2)
				return i;
		}

		T1* temp1 = new T1[_trenutnoElemenata + 1];
		T2* temp2 = new T2[_trenutnoElemenata + 1];

		for (size_t i = 0; i < _trenutnoElemenata; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}

		delete[] _elementi1;
		delete[] _elementi2;

		_elementi1 = temp1;
		_elementi2 = temp2;

		_elementi1[_trenutnoElemenata] = el1;
		_elementi2[_trenutnoElemenata] = el2;
		_trenutnoElemenata++;

		return -1;
	}

	/*2. RemoveElement :: na osnovu parametra tipa T1 uklanja elemente iz kolekcije i smanjuje velicinu niza.
	Ukoliko je potrebno, prilikom uklanjanja elementa izvrsiti dealokaciju. Prilikom uklanjanja elemenata ocuvati redoslijed
	njihovog dodavanja.*/

	bool RemoveElement(T1& el)
	{
		for (size_t i = 0; i < _trenutnoElemenata; i++)
		{
			if (_elementi1[i] == el)
			{
				T1* temp1 = new T1[_trenutnoElemenata - 1];
				T2* temp2 = new T2[_trenutnoElemenata - 1];

				int poz = 0;
				for (size_t j = 0; j < _trenutnoElemenata; j++)
				{
					if (j != i)
					{
						temp1[poz] = _elementi1[j];
						temp2[poz++] = _elementi2[j];
					}
				}

				delete[] _elementi1;
				delete[] _elementi2;

				_elementi1 = temp1;
				_elementi2 = temp2;
				_trenutnoElemenata--;

				return true;

			}
		}

		return false;
	}

	void RemoveAll()
	{
		delete[] _elementi1;
		_elementi1 = nullptr;

		delete[] _elementi2;
		_elementi2 = nullptr;

		_trenutnoElemenata = 0;
	}

	int GetTrenutno()const { return _trenutnoElemenata; }

	T1& GetElement1(int index)
	{
		if (index < 0 || index >= _trenutnoElemenata)
		{
			throw exception("Index was out of range.");
		}

		return _elementi1[index];
	}

	T2& GetElement2(int index)
	{
		if (index < 0 || index >= _trenutnoElemenata)
		{
			throw exception("Index was out of range.");
		}

		return _elementi2[index];
	}

	friend ostream& operator<<<>(ostream&, const Kolekcija&);
};

template<class T1, class T2>
ostream& operator<<(ostream& cout, const Kolekcija<T1, T2>& k)
{
	for (size_t i = 0; i < k._trenutnoElemenata; i++)
	{
		cout << k._elementi1[i] << "\n" << k._elementi2[i] << "\n\n";
	}

	return cout;
}

class Student {
	int _brojIndeksa;
	string _ime;
	string _prezime;
	string _korisnickomIme;
	string _lozinka;
public:
	/*1. potrebne funkcije
	NAPOMENE:
	2. lozinka mora postovati sljedeca pravila:
	2.a: sadrzi kombinaciju slova, brojeva i nekog od specijalnih znakova
	2.b: ne smije sadrzavati niti ime niti prezime
	2.c: sadrzi minimalno 6 znakova
	postivanje navedenih pravila se mora osigurati prije kreiranje objekta tipa Student*/
	Student() : _brojIndeksa(-1) {}
	Student(int brojIndeksa, string ime, string prezime, string korisnickoIme, string lozinka):
		_brojIndeksa(-1)
	{
		string pravilo1 = "(?=.{6,})(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[<>#&%$])";
		string pravilo2 = "(" + ime + "|" + prezime + ")";

		if (!regex_search(lozinka, regex(pravilo1)))
		{
			throw exception("Lozinka mora sadrzavati kombinaciju slova, brojeva i nekog od specijalnih karaktera.");
		}

		if (regex_search(lozinka, regex(pravilo2)))
		{
			throw exception("Lozinka ne smije sadrzavati ime niti prezime studenta.");

		}

		_brojIndeksa = brojIndeksa;
		_ime = ime;
		_prezime = prezime;
		_korisnickomIme = korisnickoIme;
		_lozinka = lozinka;

	}

	friend bool operator==(const Student&, const Student&);
	friend bool operator==(const Student&, int);

	friend ostream& operator<<(ostream&, const Student&);

};

bool operator==(const Student& s1, const Student& s2)
{
	return s1._brojIndeksa == s2._brojIndeksa;
}

bool operator==(const Student& s1, int brojIndeksa)
{
	return s1._brojIndeksa == brojIndeksa;
}

ostream& operator<<(ostream& cout, const Student& s)
{
	cout << "Broj indeksa: " << s._brojIndeksa<<endl;
	cout << "Ime i prezime: " << s._ime << " "<< s._prezime<< endl;

	return cout;
}


class Ispit {
protected:
	string _predmet;
	char * _opis;//npr. PR2::Integralni::30.01.2015
				 /*tip string u kolekciji sluzi kao napomena vezana za ponasanje studenta na ispitu gdje ce se
				 evidentirati utisci dezurnog nastavnika npr. kasnio, dosao bez indeksa, izbacen zbog prepisivanja*/
	Kolekcija<Student, string>  * _listaStudenata;
public:
	Ispit(string predmet, string opis)
	{
		_predmet = predmet;
		int size = opis.length() + 1;
		_opis = new char[size];
		strcpy_s(_opis, size, opis.c_str());

		_listaStudenata = new Kolekcija<Student, string>();
	}
	Ispit(const Ispit& i)
	{
		_predmet = i._predmet;
		int size = strlen(i._opis) + 1;
		_opis = new char[size];
		strcpy_s(_opis, size, i._opis);

		_listaStudenata = new Kolekcija<Student, string>(*i._listaStudenata);
	}

	Ispit& operator=(const Ispit& i)
	{
		if (this != &i)
		{
			_predmet = i._predmet;

			delete[] _opis;
			int size = strlen(i._opis) + 1;
			_opis = new char[size];
			strcpy_s(_opis, size, i._opis);

			*_listaStudenata =*i._listaStudenata;
		}

		return *this;
	}

	/*1. AddStudent :: dodaje podatke o studentu koji je pristupio ispitu uz odgovarajucu 
	napomenu (napomena nije obavezna).
	Studentu nije dozvoljeno da dva puta pristupi istom ispitu, 
	a u slucaju da pokusa pristupiti automatski se dodaje adekvatna napomena
	(npr. ponovo pokusao pristupiti). */
	~Ispit()
	{
		delete[] _opis;
		_opis = nullptr;

		delete _listaStudenata;
		_listaStudenata = nullptr;
	}
	void AddStudent(Student& s, string napomena = "")
	{
		int poz = _listaStudenata->AddElement(s, napomena);

		if (poz != -1)
		{
			_listaStudenata->GetElement2(poz) = "Ponovo pokusao pristupiti ispitu.";
		}
	}

	/*2. Remove - Uklanja podatke o svim studentima koji su vise puta pokusali pristupiti ispitu.*/
	void Remove()
	{
		for (size_t i = 0; i < _listaStudenata->GetTrenutno(); i++)
		{
			if (_listaStudenata->GetElement2(i) == "Ponovo pokusao pristupiti ispitu.")
			{
				_listaStudenata->RemoveElement(_listaStudenata->GetElement1(i));
			}
		}
	}

	bool StudentPristupioIspitu(int brojIndeksa)
	{
		for (size_t i = 0; i < _listaStudenata->GetTrenutno(); i++)
		{
			if (_listaStudenata->GetElement1(i) == brojIndeksa)
				return true;
		}

		return false;
	}
	Kolekcija<Student, string>& GetStudenti() { return *_listaStudenata; }

	friend bool operator==(const Ispit&, const Ispit&);
	friend bool operator>(const Ispit&, const Ispit&);

	friend bool operator==(const Ispit&, string);

	friend ostream& operator<<(ostream&, const Ispit&);


};

bool operator==(const Ispit& i1, const Ispit& i2)
{
	return strcmp(i1._opis, i2._opis) == 0 && i1._predmet == i2._predmet;
}

bool operator>(const Ispit& i1, const Ispit& i2)
{
	return i1._listaStudenata->GetTrenutno() > i2._listaStudenata->GetTrenutno();
}

bool operator==(const Ispit& i1, string predmet)
{
	return  i1._predmet == predmet;
}

ostream& operator<<(ostream& cout, const Ispit& i)
{
	cout << "Predmet: " << i._predmet << endl;
	cout << "Opis: " << i._opis << endl;

	cout << "\nPrijavljeni studenti\n\n";
	cout << *i._listaStudenata << endl;

	return cout;

}

class SkolskaGodina {
	string _skolskaGodina;//npr.2014/2015
	vector<Ispit> _odrzaniIspiti;
public:
	SkolskaGodina(string skolskaGodina)
	{
		_skolskaGodina = skolskaGodina;
	}
	/*1. AddIspit::dodate podatke o odrzanom ispitu
	2. RemoveIspit::uklanja podatke o odrzanom ispitu, 
	ali samo pod uslovom da tom ispitu nije pristupio niti jedan student

	3. GetBrojIzlazakaByPredmet::vraca podatak o tome koliko je puta trazeni student 
	//izasao na ispit iz odredjenog predmeta u
	toku skolske godine

	4. Sortira sve podatke o ispitima silazno prema broju studenata koji su im pristupali. 
	Prilikom testiranja metodu pozvati u zasebnom thread-u.

	5. operator<<::ispisuje sve dostupne podatke o odrzanim ispitima i studentima koji su im pristupili.*/
	void AddIspit(Ispit& i)
	{
		_odrzaniIspiti.push_back(i);
	}

	void RemoveIspit(Ispit& i)
	{
		vector<Ispit>::iterator it = _odrzaniIspiti.begin();

		while (it != _odrzaniIspiti.end())
		{
			if (*it == i && it->GetStudenti().GetTrenutno() == 0)
			{
				_odrzaniIspiti.erase(it);
				return;
			}

			it++;
		}


	}

	int GetBrojIzlazakaByPredmet(int brojIndeksa, string predmet)
	{
		int brojIzlazaka = 0;
		for (size_t i = 0; i < _odrzaniIspiti.size(); i++)
		{
			if (_odrzaniIspiti[i] == predmet && _odrzaniIspiti[i].StudentPristupioIspitu(brojIndeksa))
			{
				brojIzlazaka++;
			}
		}

		return brojIndeksa;
	}

	void Sort()
	{
		sort(_odrzaniIspiti.begin(), _odrzaniIspiti.end(), std::greater<>());
	}

	friend ostream& operator<<(ostream&, const SkolskaGodina&);

};

ostream& operator<<(ostream& cout, const SkolskaGodina& s)
{
	cout << "Skolska godina: " << s._skolskaGodina << endl;

	for (size_t i = 0; i < s._odrzaniIspiti.size(); i++)
	{
		cout << s._odrzaniIspiti[i] << endl;
	}

	return cout;
}

int main() {
	//izbjegavajte koristenje vlastitog imena i prezimena
	//provjeriti validnost izvrsenja svih dostupnih funkcionalnosti na objektu tipa SkolskaGodina	

	try
	{
		Student s1(1, "Larisa", "Dedovic", "lara", "Lara%2");
		Student s2(2, "Denis", "Music", "denis", "FIT%25");

		Ispit i1("Programiranje III", "PRIII::Integralni::30.01.2017");
		Ispit i2("Razvoj softvera I", "RSI::Integralni::15.01.2017");


		i1.AddStudent(s1);
		i1.AddStudent(s2);

		i2.AddStudent(s1);

		SkolskaGodina sk2017("2017/2018");
		sk2017.AddIspit(i1);
		sk2017.AddIspit(i2);

		//sk2017.Sort();
		thread sortThread(&SkolskaGodina::Sort, ref(sk2017));
		sortThread.join();

		cout << sk2017 << endl;
	}
	catch (const std::exception& e)
	{
		cout << e.what() << endl;
	}


	system("pause");
	return 0;
}
